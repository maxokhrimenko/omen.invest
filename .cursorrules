# Cursor Rules: Strict Naming and Phrasing Simplification

## Overview
This project enforces strict naming and phrasing simplification across all code and internal documentation. All identifiers and technical language must be short, direct, and purely functional without adjectives, epithets, or descriptive embellishments.

## Core Principles

### 1. Eliminate Descriptive Language
- Remove all adjectives, epithets, and descriptive embellishments
- Eliminate words that do not add concrete semantic value
- Use neutral, technical terminology only
- Avoid expressive, emotional, or subjective language

### 2. Functional Naming
- All names must be purpose-driven and minimalistic
- Use existing, commonly understood technical terms
- Maintain consistency across the entire codebase
- Ensure names are unambiguous and direct

### 3. Critical Dependency Rule
- When renaming any function, variable, class, or file:
  - Check ALL occurrences and usages across the entire codebase
  - Update ALL references accordingly
  - Verify all connections before finalizing changes
  - This is mandatory for every rename operation

## Naming Conventions

### Python Backend
- **Classes**: PascalCase, functional names only
  - `ColorMetricsService` → `MetricsService`
  - `PortfolioAnalysisUseCase` → `PortfolioAnalyzer`
  - `BeautifulDataProcessor` → `DataProcessor`

- **Functions/Methods**: snake_case, action-oriented
  - `getBeautifulData()` → `fetchData()`
  - `handleAmazingResponse()` → `processResponse()`
  - `calculateSuperFastMetrics()` → `calculateMetrics()`

- **Variables**: snake_case, descriptive but minimal
  - `superFastCacheLayer` → `cacheLayer`
  - `amazingPortfolioData` → `portfolioData`
  - `wonderfulMetrics` → `metrics`

- **Files**: snake_case, functional purpose
  - `color_metrics_service.py` → `metrics_service.py`
  - `beautiful_portfolio_analyzer.py` → `portfolio_analyzer.py`

### TypeScript/React Frontend
- **Components**: PascalCase, functional names
  - `BeautifulPortfolioChart` → `PortfolioChart`
  - `AmazingDataTable` → `DataTable`
  - `SuperFastLoader` → `Loader`

- **Functions/Variables**: camelCase, action-oriented
  - `getBeautifulData()` → `fetchData()`
  - `handleAmazingClick()` → `handleClick()`
  - `superFastCalculation()` → `calculate()`

- **Files**: PascalCase for components, camelCase for utilities
  - `BeautifulPortfolioChart.tsx` → `PortfolioChart.tsx`
  - `amazingUtils.ts` → `utils.ts`

### Configuration and Constants
- **Keys**: snake_case, functional purpose
  - `BEAUTIFUL_API_ENDPOINT` → `API_ENDPOINT`
  - `SUPER_FAST_CACHE_SIZE` → `CACHE_SIZE`
  - `AMAZING_TIMEOUT_VALUE` → `TIMEOUT_VALUE`

## Documentation Rules

### Internal Documentation (.md files)
- Remove all adjectives and descriptive language
- Use technical, objective language only
- Focus on functionality and purpose
- Examples:
  - "This module provides a wonderfully elegant solution..." → "This module provides a solution for..."
  - "The amazing performance improvements..." → "The performance improvements..."
  - "Beautiful and intuitive interface..." → "Interface for..."

### Code Comments
- Use technical language only
- Focus on what the code does, not how good it is
- Remove subjective assessments
- Examples:
  - `# This amazing function calculates...` → `# This function calculates...`
  - `# Super fast optimization here` → `# Optimization for performance`

## Scope of Application

### Apply To:
- Variable names, function names, class names
- File names and directory names
- Configuration keys and constants
- Internal documentation (.md files)
- Code comments
- API endpoint names
- Database table/column names
- Test names and descriptions

### Do NOT Apply To:
- User-facing content (UI labels, messages, app content)
- External API documentation meant for end users
- Marketing materials or public-facing documentation
- Error messages shown to users (unless they contain unnecessary adjectives)

## Examples of Required Changes

### Function Names
```python
# Before
def getBeautifulPortfolioData():
def calculateAmazingMetrics():
def handleSuperFastResponse():

# After
def getPortfolioData():
def calculateMetrics():
def handleResponse():
```

### Class Names
```python
# Before
class BeautifulPortfolioAnalyzer:
class SuperFastCacheService:
class AmazingDataProcessor:

# After
class PortfolioAnalyzer:
class CacheService:
class DataProcessor:
```

### Variable Names
```python
# Before
beautiful_data = fetchData()
amazing_results = processResults()
super_fast_cache = createCache()

# After
data = fetchData()
results = processResults()
cache = createCache()
```

### Documentation
```markdown
# Before
This amazing module provides a wonderfully elegant solution for portfolio analysis with super fast performance.

# After
This module provides portfolio analysis functionality with optimized performance.
```

## Implementation Guidelines

### 1. Systematic Approach
- Start with core domain entities and work outward
- Update all references when renaming
- Test thoroughly after each change
- Use IDE refactoring tools when possible

### 2. Consistency Checks
- Use the same term for the same concept throughout
- Maintain consistent naming patterns
- Verify no orphaned references exist

### 3. Quality Assurance
- All identifiers must be functional and minimal
- No subjective or descriptive language allowed
- Technical accuracy must be maintained
- System functionality must be preserved

## Enforcement

This project maintains strict adherence to these rules. All code changes must follow these guidelines. Code reviews should verify compliance with these naming and phrasing standards.

## Exceptions

The only exceptions are:
1. User-facing content (UI text, error messages shown to users)
2. External API documentation for end users
3. Marketing or public-facing materials

All internal code, documentation, and technical content must follow these rules without exception.
